<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<!-- zhoulei -->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
        
	<simple-method method-name="prepareCustomerDimensionData" short-description="">
        <entity-one entity-name="Person" value-field="person"/>
        <if-empty field="person">
            <add-error>
                <fail-property resource="ProductUiLabels" property="ProductProductNotFoundWithProduct"/>
            </add-error>
        </if-empty>
        <check-errors/>
        <make-value value-field="customerDimension" entity-name="CustomerDimension"/>
        <set-nonpk-fields map="person" value-field="customerDimension"/>

		<entity-and list="productStores" entity-name="ProductStore">
			<field-map field-name="productStoreId" from-field="person.memberId"/>
			<select-field field-name="productStoreId"/>
			<select-field field-name="primaryStoreGroupId"/>
			<select-field field-name="storeName"/>
		</entity-and>
		<if-not-empty field="productStores">
			<first-from-list entry="productStore" list="productStores"/>
			<set field="customerDimension.memberStoreName" from-field="productStore.storeName"/>
			<if>
	        	<condition>
	        		<or>
	            		<if-compare field="productStore.productStoreId" operator="equals" value="WECHAT_STORE"/>
	            		<if-compare field="productStore.productStoreId" operator="equals" value="B2C_WEBSTORE"/>
	         		</or>
	        	</condition>
	            <then>
	            	<set field="customerDimension.memberStoreCityId" value="_NA_"/>
	            </then>
	            <else>
	            	<set field="customerDimension.memberStoreCityId" from-field="productStore.primaryStoreGroupId"/>
	            </else>
	        </if>
			<if-not-empty field="productStore.primaryStoreGroupId">
				<entity-one entity-name="ProductStoreGroup" value-field="productStoreGroup">
					<field-map field-name="productStoreGroupId" from-field="productStore.primaryStoreGroupId"/>
					<select-field field-name="productStoreGroupName"/>
				</entity-one>
				<set field="customerDimension.memberStoreCity" from-field="productStoreGroup.productStoreGroupName"/>
			</if-not-empty>
		<else>
			<set field="customerDimension.memberStoreName" value="_NF_"/>
		</else>
		</if-not-empty>

        <set field="customerDimension.name" value="${person.lastName}${person.firstName}"/>

		<entity-and list="userLogins" entity-name="UserLogin">
			<field-map field-name="partyId" from-field="person.partyId"/>
			<order-by field-name="createdStamp"/>
		</entity-and>
		<if-not-empty field="userLogins">
			<first-from-list entry="userLogin" list="userLogins"/>
			<set field="customerDimension.registerDate" from-field="userLogin.createdStamp"/>
		</if-not-empty>
		
		<entity-and list="partyAttributes" entity-name="PartyAttribute">
			<field-map field-name="partyId" from-field="person.partyId"/>
			<field-map field-name="attrName" value="vipIntegral"/>
		</entity-and>
		<if-not-empty field="partyAttributes">
			<first-from-list entry="partyAttribute" list="partyAttributes"/>
			<set field="customerDimension.integral" from-field="partyAttribute.attrValue"/>
		<else>
			<set field="customerDimension.integral" value="0"/>
		</else>
		</if-not-empty>
		
		<entity-one value-field="party" entity-name="Party">
			<field-map field-name="partyId" from-field="person.partyId"/>
			<select-field field-name="createdDate"/>
		</entity-one>
		<set field="customerDimension.createdDate" from-field="party.createdDate"/>
		
		<entity-and list="productStoreRoles" entity-name="ProductStoreRole">
			<field-map field-name="partyId" from-field="person.partyId"/>
			<field-map field-name="roleTypeId" value="OPEN_CARD"/>
		</entity-and>
		
		<set field="registrationWay" value=""/>  
		<set field="registrationWayDesc" value="未注册"/>  
		
		<if-not-empty field="productStoreRoles">
			<first-from-list entry="productStoreRole" list="productStoreRoles"/>
			<set field="customerDimension.openCardStoreId" from-field="productStoreRole.productStoreId"/>
			
			<if-compare operator="equals" value="B2C_WEBSTORE" field="productStoreRole.productStoreId">
				<set field="registrationWay" value="B2C_WEBSTORE"/>  
				<set field="registrationWayDesc" value="网站注册"/>  
			</if-compare>
			<if-compare operator="equals" value="EC00" field="productStoreRole.productStoreId">
				<set field="registrationWay" value="B2C_WEBSTORE"/>  
				<set field="registrationWayDesc" value="网站注册"/>  
			</if-compare>
			<if-compare operator="equals" value="WECHAT_STORE" field="productStoreRole.productStoreId">
				<set field="registrationWay" value="WECHAT_STORE"/>  
				<set field="registrationWayDesc" value="微信注册"/>  
			</if-compare>
			<else>
				<set field="customerDimension.openCardStoreId" from-field="person.memberId"/>
				<entity-and list="userLoginList" entity-name="UserLogin">
					<field-map field-name="partyId" from-field="person.partyId"/>
					<select-field field-name="createdStamp"/>
				</entity-and>
				<first-from-list entry="userLogin" list="userLoginList"/>
				<if-not-empty field="userLogin">
					<set field="registrationWay" value="B2C_WEBSTORE"/>  
					<set field="registrationWayDesc" value="网站注册"/> 
					<entity-and list="partyIdentificationList" entity-name="PartyIdentification">
						<field-map field-name="partyId" from-field="person.partyId"/>
						<field-map field-name="createdStamp" from-field="userLogin.createdStamp"/>
						<field-map field-name="partyIdentificationTypeId" value="WECHATID"/>
						<select-field field-name="partyId"/>
					</entity-and>
					<first-from-list entry="partyIdentification" list="partyIdentificationList"/>
					<if-not-empty field="partyIdentification">
						<set field="registrationWay" value="WECHAT_STORE"/>  
						<set field="registrationWayDesc" value="微信注册"/> 
					</if-not-empty>
				</if-not-empty>
			</else>
		</if-not-empty>
		<set field="customerDimension.registrationWay" from-field="registrationWay"/>	
		<set field="customerDimension.registrationWayDesc" from-field="registrationWayDesc"/>			
		<entity-and list="productStores" entity-name="ProductStore">
			<field-map field-name="productStoreId" from-field="customerDimension.openCardStoreId"/>
			<select-field field-name="productStoreId"/>
			<select-field field-name="primaryStoreGroupId"/>
			<select-field field-name="storeName"/>
		</entity-and>
		<if-not-empty field="productStores">
			<first-from-list entry="productStore" list="productStores"/>
			<set field="customerDimension.openCardStoreName" from-field="productStore.storeName"/>
			<if>
	        	<condition>
	        		<or>
	            		<if-compare field="productStore.productStoreId" operator="equals" value="WECHAT_STORE"/>
	            		<if-compare field="productStore.productStoreId" operator="equals" value="B2C_WEBSTORE"/>
	         		</or>
	        	</condition>
	            <then>
	            	<set field="customerDimension.openCardStoreCityId" value="_NA_"/>
	            </then>
	            <else>
	            	<set field="customerDimension.openCardStoreCityId" from-field="productStore.primaryStoreGroupId"/>
	            </else>
	        </if>
			<if-not-empty field="productStore.primaryStoreGroupId">
				<entity-one entity-name="ProductStoreGroup" value-field="productStoreGroup">
					<field-map field-name="productStoreGroupId" from-field="productStore.primaryStoreGroupId"/>
					<select-field field-name="productStoreGroupName"/>
				</entity-one>
				<set field="customerDimension.openCardStoreCity" from-field="productStoreGroup.productStoreGroupName"/>
			</if-not-empty>
		<else>
			<set field="customerDimension.openCardStoreName" value="_NF_"/>
		</else>
		</if-not-empty>

		<entity-and list="partyContactMechPurposes" entity-name="PartyContactMechPurpose">
			<field-map field-name="partyId" from-field="person.partyId"/>
			<field-map field-name="contactMechPurposeTypeId" value="PHONE_MOBILE"/>
		</entity-and>
		<if-not-empty field="partyContactMechPurposes">
			<first-from-list entry="partyContactMechPurpose" list="partyContactMechPurposes"/>
			<entity-one value-field="telecomNumber" entity-name="TelecomNumber">
				<field-map field-name="contactMechId" from-field="partyContactMechPurpose.contactMechId"/>
			</entity-one>
			<if-not-empty field="telecomNumber">
				<set field="customerDimension.mobile" from-field="telecomNumber.contactNumber"/>
			</if-not-empty>
		</if-not-empty>
		
        <field-to-result field="customerDimension"/>
    </simple-method>
    
    <simple-method method-name="loadPersonInCustomerDimension" short-description="">
        <set-service-fields service-name="prepareCustomerDimensionData" map="parameters" to-map="inMap"/>
        <call-service service-name="prepareCustomerDimensionData" in-map-name="inMap">
            <result-to-field result-name="customerDimension"/>
        </call-service>
        <clear-field field="inMap"/>
        <set-service-fields service-name="storeGenericDimension" map="parameters" to-map="inMap"/>
        <set field="inMap.naturalKeyFields[]" value="partyId"/>
        <set field="inMap.dimensionValue" from-field="customerDimension"/>
        <call-service service-name="storeGenericDimension" in-map-name="inMap"/>
    </simple-method>
    
    <simple-method method-name="loadAllPeopleInCustomerDimension" short-description="load people incremental data">
        <now-date-to-env field="nowDate"/>
        <!--incremental date-->
        <set field="fromDate" value="${groovy:
            import java.text.SimpleDateFormat;
            def sdf = new SimpleDateFormat(&quot;yyyy-MM-dd 00:00:00.000&quot;);
            def fromDate = sdf.format(nowDate-2);
            return fromDate;
        }" type="Timestamp"/>
        <!--get person incremental data-->
        <entity-condition entity-name="Person" list="personList">
            <condition-expr field-name="lastUpdatedStamp" operator="greater" from-field="fromDate"/>
        </entity-condition>
        <iterate entry="person" list="personList">
            <log level="info" message="person increment data ${person.partyId}"/>
            <set field="partyIdMap.${person.partyId}" value="useless"/>
            <log level="info" message="${person.partyId}++++++++++++++++++1"></log>
            <!-- value="useless" -->
        </iterate>
        <!--get userLogin incremental data-->
        <entity-condition entity-name="UserLogin" list="userLoginList">
            <condition-expr field-name="lastUpdatedStamp" operator="greater" from-field="fromDate"/>
        </entity-condition>
        <iterate entry="userLogin" list="userLoginList">
            <log level="info" message="userLogin increment data ${userLogin.partyId}"/>
            <set field="partyIdMap.${userLogin.partyId}" value="useless"/>
            <log level="info" message="${userLogin.partyId}++++++++++++++++++6"></log>
        </iterate>
        <!--get productStoreRole incremental data-->
        <entity-condition entity-name="ProductStoreRole" list="productStoreRoleList">
            <condition-expr field-name="lastUpdatedStamp" operator="greater" from-field="fromDate"/>
        </entity-condition>
        <iterate entry="productStoreRole" list="productStoreRoleList">
            <log level="info" message="productStoreRole increment data ${userLogin.partyId}"/>
            <set field="partyIdMap.${productStoreRole.partyId}" value="useless"/>
            <log level="info" message="${productStoreRole.partyId}++++++++++++++++++7"></log>
        </iterate>
		<log level="info" message="${partyIdMap}++++++++++++++++++44"></log>
        <iterate-map key="entryKey" value="uselessValue" map="partyIdMap">
            <set-service-fields service-name="loadPersonInCustomerDimension" map="parameters" to-map="inMap"/>
            <set field="inMap.partyId" from-field="entryKey"/>
            <call-service service-name="loadPersonInCustomerDimension" in-map-name="inMap"/>
            <clear-field field="inMap"/>
        </iterate-map>

    </simple-method>

    <simple-method method-name="loadPeopleByDateRangeInCustomerDimension" short-description="">
        <entity-condition entity-name="Person" list="people">
        <condition-list combine="and">
	    	<condition-expr field-name="lastUpdatedStamp" operator="greater-equals" from-field="parameters.fromDate"/>
			<condition-expr field-name="lastUpdatedStamp" operator="less" from-field="parameters.thruDate"/>
        </condition-list>
        <select-field field-name="partyId"/>
        </entity-condition>
        <iterate list="people" entry="person">
            <set-service-fields service-name="loadPersonInCustomerDimension" map="parameters" to-map="inMap"/>
            <set field="inMap.partyId" from-field="person.partyId"/>
            <call-service service-name="loadPersonInCustomerDimension" in-map-name="inMap"/>
            <clear-field field="inMap"/>
        </iterate>
    </simple-method>
        
        
</simple-methods>